"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[733],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(n),m=o,y=p["".concat(c,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(y,s(s({ref:t},u),{},{components:n})):r.createElement(y,s({ref:t},u))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5755:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var r=n(7462),o=(n(7294),n(3905)),a=n(9378);n(7435);const s={},i="Kubernetes integrations",c={unversionedId:"cluster/k8s",id:"cluster/k8s",title:"Kubernetes integrations",description:"Eventually is highly probable that you install many services inside the cluster, and you can even implement various deployments, to maintain the order we differentiate some Namespaces within the cluster, you should know that we create a Namespace for every existing combination of Project and Environment, we simply call it a ProjectEnv. Then, every dependency and deployment is allocated inside a Namespace equal to its associated ProjectEnv.",source:"@site/docs/cluster/k8s.mdx",sourceDirName:"cluster",slug:"/cluster/k8s",permalink:"/cluster/k8s",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Cluster",permalink:"/cluster/"},next:{title:"Kubernetes cluster SleakOps built-in resources",permalink:"/cluster/k8s_utilities"}},l={},u=[{value:"Connecting to Lens",id:"connecting-to-lens",level:2}],p={toc:u},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"kubernetes-integrations"},"Kubernetes integrations"),(0,o.kt)("p",null,"Eventually is highly probable that you install many services inside the cluster, and you can even implement various deployments, to maintain the order we differentiate some Namespaces within the cluster, you should know that we create a Namespace for every existing combination of ",(0,o.kt)("a",{parentName:"p",href:"/project/"},"Project")," and ",(0,o.kt)("a",{parentName:"p",href:"/environment"},"Environment"),", we simply call it a ProjectEnv. Then, every dependency and deployment is allocated inside a Namespace equal to its associated ProjectEnv."),(0,o.kt)("p",null,"SleakOps has different Kubernetes integrations to help you work more easily with the cluster, this is why we install metrics-server and why we need to open little access to it for SleakOps. The most obvious implementation is the cluster dashboard where you can monitor your cluster, to use it just go to the 'Clusters' tab and select the cluster you want to check its metrics."),(0,o.kt)(a.Z,{overlayBgColorEnd:"rgba(255, 255, 255, 0.8)",mdxType:"Zoom"},(0,o.kt)("img",{src:"/img/cluster/clusters-dashboard.png",alt:"clusters-dashboard"})),(0,o.kt)("p",null,'In addition, over the dashboard and for every cluster you will find a "Generate Kubeconfig" button where you can copy the cluster kubeconfig so you can use it at your will.'),(0,o.kt)(a.Z,{overlayBgColorEnd:"rgba(255, 255, 255, 0.8)",mdxType:"Zoom"},(0,o.kt)("img",{src:"/img/cluster/dashboard-kubeconfig.png",alt:"dashboard-kubeconfig"})),(0,o.kt)("h2",{id:"connecting-to-lens"},"Connecting to Lens"),(0,o.kt)("p",null,"Lens is a powerful tool for monitoring a cluster but first, it needs access to your cluster. This is an example of a good and useful way to use the generated kubeconfig, you can simply copy the kubeconfig as described above and paste it to Lens, remember that you need to be connected to your created VPN."),(0,o.kt)(a.Z,{overlayBgColorEnd:"rgba(255, 255, 255, 0.8)",mdxType:"Zoom"},(0,o.kt)("img",{src:"/img/cluster/lens-kubeconfig.png",alt:"kubeconfig-to-lens"})))}m.isMDXComponent=!0}}]);