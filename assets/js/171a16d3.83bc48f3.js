"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[188],{9273:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>n,metadata:()=>l,toc:()=>u});var a=i(7462),o=(i(7294),i(3905)),r=i(7219);const n={},s="Initial image build",l={unversionedId:"project/initial-build",id:"project/initial-build",title:"Initial image build",description:"Why do we only automate the first build?",source:"@site/docs/project/initial-build.mdx",sourceDirName:"project",slug:"/project/initial-build",permalink:"/project/initial-build",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Gitlab",permalink:"/project/gitlab"},next:{title:"Service",permalink:"/service/"}},d={},u=[{value:"Why do we only automate the first build?",id:"why-do-we-only-automate-the-first-build",level:2},{value:"How and when does Sleakops builds the image?",id:"how-and-when-does-sleakops-builds-the-image",level:3},{value:"Summary of resources created in the cluster",id:"summary-of-resources-created-in-the-cluster",level:2}],h={toc:u},c="wrapper";function p(e){let{components:t,...i}=e;return(0,o.kt)(c,(0,a.Z)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"initial-image-build"},"Initial image build"),(0,o.kt)("h2",{id:"why-do-we-only-automate-the-first-build"},"Why do we only automate the first build?"),(0,o.kt)("p",null,"We make a first build of the image to deploy your apps faster, as we take advantage of the already active infrastructure. New images are built when services are published in deployments"),(0,o.kt)("h3",{id:"how-and-when-does-sleakops-builds-the-image"},"How and when does Sleakops builds the image?"),(0,o.kt)("p",null,"When a project is created, you need to point to a path within the git repository where the Dockerfile is.\nSleakops scans the Dockerfile in search of arguments that are necessary for the build and asks you for values to make this first build.\nThe project list indicates the state of every project, and whether some extra information is required.\nThe values you provide for this initial build aren't meant to be permanent and can be modified for future builds."),(0,o.kt)("p",null,"The image is built once a namespace is created, that is when a project and an environment join for a service or a dependency.\nSleakops uses the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/GoogleContainerTools/kaniko"},"Kaniko ",(0,o.kt)(r.AlO,{mdxType:"FiExternalLink"}))," tool image, which is a tool to create container images from a Dockerfile, inside a Kubernetes cluster.\nWhen the cluster is ready and you have provided all the arguments for the Dockerfile, a Kubernetes job is launched, along with a persistent volume for storage and the corresponding authentication secrets."),(0,o.kt)("p",null,"Finally, the image is pushed to the ECR of the project, which is hosted in the management account,\naccording to our ",(0,o.kt)("a",{parentName:"p",href:"/provider/aws"},"proposed architecture"),". The resulting image has the project name and is tagged ",(0,o.kt)("inlineCode",{parentName:"p"},"environment-name_latest"),"."),(0,o.kt)("h2",{id:"summary-of-resources-created-in-the-cluster"},"Summary of resources created in the cluster"),(0,o.kt)("p",null,"As previously discussed when the Kaniko job is created, all the resources listed below are also created inside the respective cluster:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A cluster secret containing the ECR credentials needed to push the image."),(0,o.kt)("li",{parentName:"ul"},"A persistent volume for the Kaniko tasks to store the context it needs."),(0,o.kt)("li",{parentName:"ul"},"The respective persistent volume claim."),(0,o.kt)("li",{parentName:"ul"},"The job itself.")))}p.isMDXComponent=!0}}]);