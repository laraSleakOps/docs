"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4787],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>h});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),c=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(i.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},v=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),v=a,h=u["".concat(i,".").concat(v)]||u[v]||d[v]||s;return t?n.createElement(h,o(o({ref:r},p),{},{components:t})):n.createElement(h,o({ref:r},p))}));function h(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=v;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<s;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}v.displayName="MDXCreateElement"},9545:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var n=t(7462),a=(t(7294),t(3905));const s={},o="Release",l={unversionedId:"deployment/release",id:"deployment/release",title:"Release",description:"What is a Release",source:"@site/docs/deployment/release.mdx",sourceDirName:"deployment",slug:"/deployment/release",permalink:"/deployment/release",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Deployment",permalink:"/deployment/"},next:{title:"Variable Group",permalink:"/vargroup/"}},i={},c=[{value:"What is a Release",id:"what-is-a-release",level:2},{value:"Release Creation",id:"release-creation",level:2},{value:"How SleakOps handle release",id:"how-sleakops-handle-release",level:2},{value:"Helm chart resources",id:"helm-chart-resources",level:2},{value:"SleakOps web-service service:",id:"sleakops-web-service-service",level:3},{value:"SleakOps worker service:",id:"sleakops-worker-service",level:3},{value:"SleakOps hook service:",id:"sleakops-hook-service",level:3},{value:"SleakOps cronjob service:",id:"sleakops-cronjob-service",level:3}],p={toc:c},u="wrapper";function d(e){let{components:r,...t}=e;return(0,a.kt)(u,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"release"},"Release"),(0,a.kt)("h2",{id:"what-is-a-release"},"What is a Release"),(0,a.kt)("p",null,"In Sleakops a release represents a deployable state of all the services (web-services, workers, cronjobs, jobs) of a ",(0,a.kt)("a",{parentName:"p",href:"/project"},"project")," in a ",(0,a.kt)("a",{parentName:"p",href:"/environment"},"environment")),(0,a.kt)("h2",{id:"release-creation"},"Release Creation"),(0,a.kt)("p",null,"To create a release you must have one or more services with unreleased changes ('draft' state), a ",(0,a.kt)("a",{parentName:"p",href:"/environment"},"environment")," and a version number to set to the release\nafter that you are ready to ",(0,a.kt)("a",{parentName:"p",href:"/deployment"},"deploy")," this release on selected ",(0,a.kt)("a",{parentName:"p",href:"/cluster"},"cluster"),"."),(0,a.kt)("h2",{id:"how-sleakops-handle-release"},"How SleakOps handle release"),(0,a.kt)("p",null,"When a release is created a Helm chart is built and pushed to a chart repository created (if it does not exists) at this point.\nThis chart contains all your SleakOps services and depending on the type of these services, the chart, will contain different resources."),(0,a.kt)("h2",{id:"helm-chart-resources"},"Helm chart resources"),(0,a.kt)("h3",{id:"sleakops-web-service-service"},"SleakOps web-service service:"),(0,a.kt)("p",null,"a Kubernetes deployment\na Kubernetes service\na Kubernetes HPA (Horizontal Pod Autoscaler)\na Kubernetes ingress"),(0,a.kt)("p",null,"Ingress generates his hosts using <service_name>.<environment_name>.<organization_name>",".","<yourdomain",".","com>"),(0,a.kt)("h3",{id:"sleakops-worker-service"},"SleakOps worker service:"),(0,a.kt)("p",null,"a Kubernetes deployment\na Kubernetes HPA"),(0,a.kt)("h3",{id:"sleakops-hook-service"},"SleakOps hook service:"),(0,a.kt)("p",null,"a Kubernetes job"),(0,a.kt)("p",null,"This job uses Kubernetes hooks to start"),(0,a.kt)("h3",{id:"sleakops-cronjob-service"},"SleakOps cronjob service:"),(0,a.kt)("p",null,"a Kubernetes cronjob"))}d.isMDXComponent=!0}}]);